{
  "stats": {
    "suites": 1,
    "tests": 4,
    "passes": 4,
    "pending": 0,
    "failures": 0,
    "start": "2018-05-14T15:52:56.931Z",
    "end": "2018-05-14T15:52:57.008Z",
    "duration": 77,
    "testsRegistered": 4,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "ddfd1f74-1118-4b2b-a587-478e29a1a14e",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "a49a6f57-416a-4f42-9869-89d1416bea22",
        "title": "websocket integration tests",
        "fullFile": "/home/erik/Projects/@superhero/js.core.websocket/test/integration.test.js",
        "file": "/test/integration.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "websocket integration tests \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "const\nbootstrap = require('../bootstrap'),\nport      = 9001\ncontext(this, { title:'routes', value:routes})\ncore.bootstrap(bootstrap).then((core) =>\n{\n  const debug = false\n  client = new WsClient({ debug })\n  server = core.server('websocket', routes, { debug })\n  server.on('listening', async () =>\n  {\n    await client.connect(port)\n    done()\n  })\n  server.listen(port)\n})",
            "err": {},
            "isRoot": false,
            "uuid": "3bd6092f-a429-4aa2-a8fa-2d3305ac9a45",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook",
            "fullTitle": "websocket integration tests \"after each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "client.socket.end()\nserver.close()",
            "err": {},
            "isRoot": false,
            "uuid": "4a5064c7-bd81-4b2c-9399-bce63d716b8e",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "websocket responding",
            "fullTitle": "websocket integration tests websocket responding",
            "timedOut": false,
            "duration": 19,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "{\n  \"title\": \"routes\",\n  \"value\": [\n    {\n      \"endpoint\": \"controller/reflect\",\n      \"policy\": \"reflect\"\n    },\n    {\n      \"endpoint\": \"controller/multi\",\n      \"policy\": \"multi\"\n    },\n    {\n      \"chain\": \"controller/middleware\",\n      \"endpoint\": \"controller/obj\",\n      \"policy\": \"middleware\"\n    },\n    {\n      \"endpoint\": \"controller/not-implemented\",\n      \"policy\": \"not-implemented\"\n    }\n  ]\n}",
            "code": "const\nevt   = 'reflect',\ndata  = 'foobar'\nclient.events.on(evt, (dto) =>\n{\n  expect(dto).to.be.equal(data)\n  done()\n})\nclient.emit(evt, data)",
            "err": {},
            "isRoot": false,
            "uuid": "4fd59b98-9313-4bc7-8356-20404974cc2a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "websocket responding with multiple responses",
            "fullTitle": "websocket integration tests websocket responding with multiple responses",
            "timedOut": false,
            "duration": 39,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "{\n  \"title\": \"routes\",\n  \"value\": [\n    {\n      \"endpoint\": \"controller/reflect\",\n      \"policy\": \"reflect\"\n    },\n    {\n      \"endpoint\": \"controller/multi\",\n      \"policy\": \"multi\"\n    },\n    {\n      \"chain\": \"controller/middleware\",\n      \"endpoint\": \"controller/obj\",\n      \"policy\": \"middleware\"\n    },\n    {\n      \"endpoint\": \"controller/not-implemented\",\n      \"policy\": \"not-implemented\"\n    }\n  ]\n}",
            "code": "const evt = 'multi'\nlet i = 0\nclient.events.on(evt, (dto) =>\n{\n  ++i === 3\n  && done()\n})\nclient.emit(evt)",
            "err": {},
            "isRoot": false,
            "uuid": "690bd27c-e946-41f2-8386-b9fe272c7a99",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "websocket middleware works as expected",
            "fullTitle": "websocket integration tests websocket middleware works as expected",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "{\n  \"title\": \"routes\",\n  \"value\": [\n    {\n      \"endpoint\": \"controller/reflect\",\n      \"policy\": \"reflect\"\n    },\n    {\n      \"endpoint\": \"controller/multi\",\n      \"policy\": \"multi\"\n    },\n    {\n      \"chain\": \"controller/middleware\",\n      \"endpoint\": \"controller/obj\",\n      \"policy\": \"middleware\"\n    },\n    {\n      \"endpoint\": \"controller/not-implemented\",\n      \"policy\": \"not-implemented\"\n    }\n  ]\n}",
            "code": "const evt = 'middleware'\nclient.events.on(evt, (dto) =>\n{\n  expect(dto.wentThroughMddleware).to.be.equal(true)\n  done()\n})\nclient.emit(evt)",
            "err": {},
            "isRoot": false,
            "uuid": "563016d0-50cd-4b3d-9900-a321dba010d4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "websocket not implemented response with an error",
            "fullTitle": "websocket integration tests websocket not implemented response with an error",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "{\n  \"title\": \"routes\",\n  \"value\": [\n    {\n      \"endpoint\": \"controller/reflect\",\n      \"policy\": \"reflect\"\n    },\n    {\n      \"endpoint\": \"controller/multi\",\n      \"policy\": \"multi\"\n    },\n    {\n      \"chain\": \"controller/middleware\",\n      \"endpoint\": \"controller/obj\",\n      \"policy\": \"middleware\"\n    },\n    {\n      \"endpoint\": \"controller/not-implemented\",\n      \"policy\": \"not-implemented\"\n    }\n  ]\n}",
            "code": "client.events.on('error', (dto) => done())\nclient.emit('not-implemented')",
            "err": {},
            "isRoot": false,
            "uuid": "1060c15b-df6f-4400-bef0-3e4874ca22f8",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "4fd59b98-9313-4bc7-8356-20404974cc2a",
          "690bd27c-e946-41f2-8386-b9fe272c7a99",
          "563016d0-50cd-4b3d-9900-a321dba010d4",
          "1060c15b-df6f-4400-bef0-3e4874ca22f8"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 60,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}